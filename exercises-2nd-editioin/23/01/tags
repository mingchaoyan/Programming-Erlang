!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
area	src/area_server.erl	/^area(Thing) ->$/;"	f	module:area_server
area_server	src/area_server.erl	/^-module(area_server).$/;"	m
code_change	src/area_server.erl	/^code_change(_OldVsn, N, _Extra) -> {ok, N}.$/;"	f	module:area_server
code_change	src/my_alarm_handler.erl	/^code_change(_OldVsn, State, _Extra) -> {ok, State}.$/;"	f	module:my_alarm_handler
code_change	src/prime_server.erl	/^code_change(_OldVsn, N, _Extra) -> {ok, N}.$/;"	f	module:prime_server
code_change	src/prime_tester_server.erl	/^code_change(_OldVsn, State, _Extra) ->$/;"	f	module:prime_tester_server
compute_area	src/area_server.erl	/^compute_area({rectongle, X, Y}) -> X*Y.$/;"	f	module:area_server
compute_area	src/area_server.erl	/^compute_area({square, X})       -> X*X;$/;"	f	module:area_server
handle_call	src/area_server.erl	/^handle_call({area, Thing}, _From, N) -> {reply, compute_area(Thing), N+1}.$/;"	f	module:area_server
handle_call	src/my_alarm_handler.erl	/^handle_call(_Request, N) -> Reply = N, {ok, Reply,  N}.$/;"	f	module:my_alarm_handler
handle_call	src/prime_server.erl	/^handle_call({prime, K}, _From, N) -> $/;"	f	module:prime_server
handle_call	src/prime_tester_server.erl	/^handle_call(_Request, _From, State) ->$/;"	f	module:prime_tester_server
handle_call	src/prime_tester_server.erl	/^handle_call({is_prime, Num}, _From, State) ->$/;"	f	module:prime_tester_server
handle_cast	src/area_server.erl	/^handle_cast(_Msg, N)  -> {noreply, N}.$/;"	f	module:area_server
handle_cast	src/prime_server.erl	/^handle_cast(_Msg, N)  -> {noreply, N}.$/;"	f	module:prime_server
handle_cast	src/prime_tester_server.erl	/^handle_cast(_Msg, State) ->$/;"	f	module:prime_tester_server
handle_event	src/my_alarm_handler.erl	/^handle_event(Event, N) ->$/;"	f	module:my_alarm_handler
handle_event	src/my_alarm_handler.erl	/^handle_event({clear_alarm, tooHot}, N) ->$/;"	f	module:my_alarm_handler
handle_event	src/my_alarm_handler.erl	/^handle_event({set_alarm, tooHot}, N) ->$/;"	f	module:my_alarm_handler
handle_info	src/area_server.erl	/^handle_info(_Info, N)  -> {noreply, N}.$/;"	f	module:area_server
handle_info	src/my_alarm_handler.erl	/^handle_info(_Info, N)    -> {ok, N}.$/;"	f	module:my_alarm_handler
handle_info	src/prime_server.erl	/^handle_info(_Info, N)  -> {noreply, N}.$/;"	f	module:prime_server
handle_info	src/prime_tester_server.erl	/^handle_info(_Info, State) ->$/;"	f	module:prime_tester_server
init	src/area_server.erl	/^init([]) ->$/;"	f	module:area_server
init	src/my_alarm_handler.erl	/^init(Args) ->$/;"	f	module:my_alarm_handler
init	src/prime_server.erl	/^init([]) ->$/;"	f	module:prime_server
init	src/prime_tester_server.erl	/^init([]) ->$/;"	f	module:prime_tester_server
init	src/sellaprime_sup.erl	/^init([]) ->$/;"	f	module:sellaprime_sup
is_prime	src/lib_primes.erl	/^is_prime(0, _, _) -> true;  %% <label id="is_prime_1" \/>$/;"	f	module:lib_primes
is_prime	src/lib_primes.erl	/^is_prime(D) ->$/;"	f	module:lib_primes
is_prime	src/lib_primes.erl	/^is_prime(D) when D < 10 ->$/;"	f	module:lib_primes
is_prime	src/lib_primes.erl	/^is_prime(D, Ntests) ->$/;"	f	module:lib_primes
is_prime	src/lib_primes.erl	/^is_prime(Ntest, N, Len) ->  %% <label id="is_prime_2" \/>$/;"	f	module:lib_primes
is_prime	src/prime_tester_server.erl	/^is_prime(Num) ->$/;"	f	module:prime_tester_server
lib_primes	src/lib_primes.erl	/^-module(lib_primes).$/;"	m
make_new_prime	src/prime_server.erl	/^make_new_prime(K) ->$/;"	f	module:prime_server
make_prime	src/lib_primes.erl	/^make_prime(0, _) ->    %% <label id="prime_loop1" \/>$/;"	f	module:lib_primes
make_prime	src/lib_primes.erl	/^make_prime(1) -> %% <label id="make_primes1" \/>$/;"	f	module:lib_primes
make_prime	src/lib_primes.erl	/^make_prime(K) when K > 0 -> %% <label id="make_primes2" \/>$/;"	f	module:lib_primes
make_prime	src/lib_primes.erl	/^make_prime(K, P) ->$/;"	f	module:lib_primes
make_random_int	src/lib_primes.erl	/^make_random_int(0, D) -> D;$/;"	f	module:lib_primes
make_random_int	src/lib_primes.erl	/^make_random_int(N) -> new_seed(), make_random_int(N, 0). %% <label id="make_ran_int1" \/> $/;"	f	module:lib_primes
make_random_int	src/lib_primes.erl	/^make_random_int(N, D) ->$/;"	f	module:lib_primes
my_alarm_handler	src/my_alarm_handler.erl	/^-module(my_alarm_handler).$/;"	m
new_prime	src/prime_server.erl	/^new_prime(N) ->$/;"	f	module:prime_server
new_seed	src/lib_primes.erl	/^new_seed() ->$/;"	f	module:lib_primes
prime_server	src/prime_server.erl	/^-module(prime_server).$/;"	m
prime_tester_server	src/prime_tester_server.erl	/^-module(prime_tester_server).$/;"	m
sellaprime_app	src/sellaprime_app.erl	/^-module(sellaprime_app).$/;"	m
sellaprime_sup	src/sellaprime_sup.erl	/^-module(sellaprime_sup).$/;"	m
start	src/sellaprime_app.erl	/^start(_Type, StartArgs) ->$/;"	f	module:sellaprime_app
start	src/sellaprime_sup.erl	/^start() ->$/;"	f	module:sellaprime_sup
start_in_shell_for_testing	src/sellaprime_sup.erl	/^start_in_shell_for_testing() ->$/;"	f	module:sellaprime_sup
start_link	src/area_server.erl	/^start_link() ->$/;"	f	module:area_server
start_link	src/prime_server.erl	/^start_link() ->$/;"	f	module:prime_server
start_link	src/prime_tester_server.erl	/^start_link() ->$/;"	f	module:prime_tester_server
start_link	src/sellaprime_sup.erl	/^start_link(Args) ->$/;"	f	module:sellaprime_sup
state	src/prime_tester_server.erl	/^-record(state, {}).$/;"	r
stop	src/sellaprime_app.erl	/^stop(_State) ->$/;"	f	module:sellaprime_app
terminate	src/area_server.erl	/^terminate(_Reason, _N) -> $/;"	f	module:area_server
terminate	src/my_alarm_handler.erl	/^terminate(_Reason, _N)   -> ok.$/;"	f	module:my_alarm_handler
terminate	src/prime_server.erl	/^terminate(_Reason, _N) -> $/;"	f	module:prime_server
terminate	src/prime_tester_server.erl	/^terminate(_Reason, _State) ->$/;"	f	module:prime_tester_server
